import { Component, EventEmitter, Input, Output } from '@angular/core';
import { StorageItemIconComponent } from "../storage-item-icon/storage-item-icon.component";
import { MatTooltipModule } from "@angular/material/tooltip";
import { MatButtonModule } from "@angular/material/button";
import { MatIconModule } from "@angular/material/icon";
import { FormatBytesPipe } from "../../pipes/format-bytes.pipe";
import { DatePipe, NgOptimizedImage } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "../../services/console-logger.service";
import * as i2 from "../../services/firebase-storage.service";
import * as i3 from "@angular/material/tooltip";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
export class StorageFilePreviewComponent {
    constructor(cLog, storageService) {
        this.cLog = cLog;
        this.storageService = storageService;
        /**
         * Emits an event when the preview should be closed.
         * @event
         */
        this._close = new EventEmitter();
        /**
         * Indicates whether an error occurred while generating the file preview URL.
         */
        this.previewError = false;
    }
    ngOnChanges() {
        if (!this.item)
            return;
        /** Fetches the download URL for the new file and updates the preview state. */
        const fileRef = this.storageService.getRef(this.item.fullPath);
        this.storageService.getDownloadURL(fileRef)
            .then((downloadURL) => {
            this.previewError = false;
            this.downloadURL = downloadURL;
        }).catch((error) => {
            this.cLog.error(`Error getting download URL for '${this.item?.name}'`, error, this.item);
        });
    }
    /**
     * Emits the '_close' event to signal that the preview should be closed.
     */
    closePreview() {
        this._close.emit(undefined);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: StorageFilePreviewComponent, deps: [{ token: i1.ConsoleLoggerService }, { token: i2.FirebaseStorageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.3", type: StorageFilePreviewComponent, isStandalone: true, selector: "anon-storage-file-preview", inputs: { item: "item" }, outputs: { _close: "_close" }, usesOnChanges: true, ngImport: i0, template: "@if (item) {\n  <div class=\"header\">\n    <div class=\"name\">\n      <anon-storage-item-icon [type]=\"item.type!\" [contentType]=\"item.contentType!\" />\n      <span matTooltipShowDelay=\"500\" [matTooltip]=\"item.name\">{{item.name}}</span>\n    </div>\n\n    <button mat-icon-button type=\"button\" (click)=\"closePreview()\">\n      <mat-icon fontIcon=\"close\" />\n    </button>\n  </div>\n\n  @if (downloadURL) {\n    <!-- eslint-disable-next-line @angular-eslint/template/no-call-expression -->\n    @if (item.contentType?.startsWith('image/')) {\n      <picture class=\"file-preview\">\n        <img fill [ngSrc]=\"downloadURL\" [alt]=\"item.fullPath\"\n             (error)=\"downloadURL=undefined;previewError=true\" />\n      </picture>\n      <!-- eslint-disable-next-line @angular-eslint/template/no-call-expression -->\n    } @else if (item.contentType?.startsWith('video/')) {\n      <video class=\"file-preview\" controls autoplay loop>\n        <source [type]=\"item.contentType\" [src]=\"downloadURL\"\n                (error)=\"downloadURL=undefined;previewError=true\"/>\n      </video>\n    }\n    <div class=\"download-btn\">\n      <a mat-stroked-button type=\"button\" color=\"primary\" target=\"_blank\" [href]=\"downloadURL\">\n        <mat-icon fontIcon=\"download\" />\n        <span>Download</span>\n      </a>\n    </div>\n  }\n  @if (previewError) {\n    <h3 class=\"file-preview\">Preview Not Available.</h3>\n  }\n\n  <dl class=\"metadata\">\n    <dt>Name</dt>\n    <dd><a class=\"download-link\" target=\"_blank\" [href]=\"downloadURL\">{{item.name}}</a></dd>\n\n    <dt>Size</dt>\n    <dd>{{item.size | formatBytes}}</dd>\n\n    <dt>Type</dt>\n    <dd>{{item.contentType}}</dd>\n\n    <dt>Created</dt>\n    <dd>{{item.timeCreated | date:'short'}}</dd>\n\n    <dt>Last modified</dt>\n    <dd>{{item.updated | date:'short'}}</dd>\n  </dl>\n}\n", styles: [":host{display:block;margin-left:-1.5rem;flex-shrink:0;border-left-width:1px;border-left-style:solid;height:100%}.header{display:flex;justify-content:space-between;align-items:center;padding:.5rem 1.5rem}.header .name{display:flex;align-items:center;overflow:hidden}.header .name span{display:inline-block;flex-grow:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.file-preview{display:grid;place-content:center;max-width:100%;max-height:250px;padding:.5rem 1.5rem;box-sizing:border-box}.file-preview img{position:relative!important}.metadata{padding:0 1.5rem .5rem}.download-link{overflow-wrap:break-word}.download-btn{display:flex;justify-content:center}\n"], dependencies: [{ kind: "component", type: StorageItemIconComponent, selector: "anon-storage-item-icon", inputs: ["type", "contentType"] }, { kind: "ngmodule", type: MatTooltipModule }, { kind: "directive", type: i3.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i4.MatAnchor, selector: "a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]", exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i4.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: FormatBytesPipe, name: "formatBytes" }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "directive", type: NgOptimizedImage, selector: "img[ngSrc]", inputs: ["ngSrc", "ngSrcset", "sizes", "width", "height", "loading", "priority", "loaderParams", "disableOptimizedSrcset", "fill", "placeholder", "placeholderConfig", "src", "srcset"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: StorageFilePreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'anon-storage-file-preview', standalone: true, imports: [
                        StorageItemIconComponent,
                        MatTooltipModule,
                        MatButtonModule,
                        MatIconModule,
                        FormatBytesPipe,
                        DatePipe,
                        NgOptimizedImage,
                    ], template: "@if (item) {\n  <div class=\"header\">\n    <div class=\"name\">\n      <anon-storage-item-icon [type]=\"item.type!\" [contentType]=\"item.contentType!\" />\n      <span matTooltipShowDelay=\"500\" [matTooltip]=\"item.name\">{{item.name}}</span>\n    </div>\n\n    <button mat-icon-button type=\"button\" (click)=\"closePreview()\">\n      <mat-icon fontIcon=\"close\" />\n    </button>\n  </div>\n\n  @if (downloadURL) {\n    <!-- eslint-disable-next-line @angular-eslint/template/no-call-expression -->\n    @if (item.contentType?.startsWith('image/')) {\n      <picture class=\"file-preview\">\n        <img fill [ngSrc]=\"downloadURL\" [alt]=\"item.fullPath\"\n             (error)=\"downloadURL=undefined;previewError=true\" />\n      </picture>\n      <!-- eslint-disable-next-line @angular-eslint/template/no-call-expression -->\n    } @else if (item.contentType?.startsWith('video/')) {\n      <video class=\"file-preview\" controls autoplay loop>\n        <source [type]=\"item.contentType\" [src]=\"downloadURL\"\n                (error)=\"downloadURL=undefined;previewError=true\"/>\n      </video>\n    }\n    <div class=\"download-btn\">\n      <a mat-stroked-button type=\"button\" color=\"primary\" target=\"_blank\" [href]=\"downloadURL\">\n        <mat-icon fontIcon=\"download\" />\n        <span>Download</span>\n      </a>\n    </div>\n  }\n  @if (previewError) {\n    <h3 class=\"file-preview\">Preview Not Available.</h3>\n  }\n\n  <dl class=\"metadata\">\n    <dt>Name</dt>\n    <dd><a class=\"download-link\" target=\"_blank\" [href]=\"downloadURL\">{{item.name}}</a></dd>\n\n    <dt>Size</dt>\n    <dd>{{item.size | formatBytes}}</dd>\n\n    <dt>Type</dt>\n    <dd>{{item.contentType}}</dd>\n\n    <dt>Created</dt>\n    <dd>{{item.timeCreated | date:'short'}}</dd>\n\n    <dt>Last modified</dt>\n    <dd>{{item.updated | date:'short'}}</dd>\n  </dl>\n}\n", styles: [":host{display:block;margin-left:-1.5rem;flex-shrink:0;border-left-width:1px;border-left-style:solid;height:100%}.header{display:flex;justify-content:space-between;align-items:center;padding:.5rem 1.5rem}.header .name{display:flex;align-items:center;overflow:hidden}.header .name span{display:inline-block;flex-grow:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.file-preview{display:grid;place-content:center;max-width:100%;max-height:250px;padding:.5rem 1.5rem;box-sizing:border-box}.file-preview img{position:relative!important}.metadata{padding:0 1.5rem .5rem}.download-link{overflow-wrap:break-word}.download-btn{display:flex;justify-content:center}\n"] }]
        }], ctorParameters: () => [{ type: i1.ConsoleLoggerService }, { type: i2.FirebaseStorageService }], propDecorators: { item: [{
                type: Input
            }], _close: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,