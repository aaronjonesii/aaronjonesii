rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Deny everything that is not specifcally allowed
    match /{document=**} { allow read, write: if false; }

    // functions
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return request.auth.token.admin == true; }
    function verifyFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) && request.resource.data.keys().hasOnly(allAllowedFields);
    }

    // projects collection
    match /projects/{projectID} {
      // project functions
      function getRole(rsc) { return rsc.data.roles[request.auth.uid]; }
      function isOneOfRoles(rsc, array) { return isSignedIn() && (getRole(rsc) in array); }
      function isNotDraft(rsc) { return rsc.data.status != 'draft'; }
      function isPublic(rsc) { return rsc.data.visibility == 'public'; }
      function isCommentsEnabled(rsc) { return rsc.data.allowComments == true; }

      allow read: if isAdmin() || isOneOfRoles(resource, ['owner', 'writer', 'reader']) || isPublic(resource) && isNotDraft(resource);
      allow write: if isAdmin() && isOneOfRoles(request.resource, ['owner']);

      // project shards collection
      match /shards/{shardID} {
        allow read, write;
      }

      // project comments collection
      match /comments/{commentID} {
        // comment functions
        function isValidComment() { return request.resource.data.user == /databases/$(database)/documents/users/$(request.auth.uid); }

        allow create: if isCommentsEnabled(resource) && isValidComment();
        allow read: if isCommentsEnabled(resource) && isPublic(resource);
      }
    }

    // tags collection
    match /tags/{tagID} {
      allow read;
      allow write: if isAdmin();
    }

    // users
    match /users/{uid} {
      // users functions
      function isValidUpdate() { return (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following', 'updated'])); }

      allow read: if request.auth.uid == uid || isAdmin();
      allow update: if request.auth.uid == uid && isValidUpdate();
    }

    // contact
    match /contact/{contactID} {
      allow read: if isAdmin();
      allow create: if verifyFields(['name', 'company', 'email', 'message', 'created'], []);
    }

    // mail
    match /mail/{mailID} {
      allow read: if isAdmin();
      allow create: if verifyFields(['message'], ['template', 'to', 'toUids', 'cc', 'ccUids', 'bcc', 'bccUids', 'from', 'replyTo', 'headers', 'attachments']);
    }
  }
}